#+TITLE:  cxml-location README
#+AUTHOR: Jan Moringen
#+EMAIL:  jmoringe@techfak.uni-bielefeld.de

* Introduction
  The =cxml-location= system provides manipulation and conversion
  mechanisms for XML data:
  + Typed, XPath-based location bindings
  + Extensible Lisp -> XML and XML -> Lisp conversion
  + Automatic compile-time parsing of XML documents and XPaths
* Tutorial
  The simplest case of using the =cxml-location= looks like this:
#+BEGIN_SRC lisp
  (let ((loc (cxml-location:loc "<foo a='1' b='c d'>bar baz</foo>" "node()")))
    (values
     (cxml-location:name loc)
     (cxml-location:@    loc "a" :type 'integer)
     (cxml-location:@    loc "b" :type '(list symbol))
     ;(cxml-location:val  loc     :type '(list symbol))
     ))
#+END_SRC
  The first line constructs a =cxml-location:location= for the
  document =<foo a='1'/>= and the XPath =node()=. In the second line,
  the value of the XML document node represented by the location is
  interpreted as an =integer= number and extracted as a Lisp object.

#+BEGIN_SRC lisp
  (let ((loc (cxml-location:loc "<foo old-attr='1'/>" "node()"
                                :if-no-match :create)))
    (setf (cxml-location:@ loc "new-attr") "bar")
    loc)

#+END_SRC
  TODO discuss setting XML data.
* Conversion Infrastructure
  The core of the conversion infrastructure consists of two
  operations:
  + Lisp -> XML conversion
  + XML -> Lisp conversion
  Actually, there are several details which lead to a greater number
  of conversions, but all of these are special cases of the
  aforementioned two conversions.
** Lisp to XML conversion
** XML to Lisp conversion
** Adding Conversions
   There are several possible ways to define to/from XML conversion
   methods for a type:
   1. Types that have obvious string representations
   2. Types that require a structured representation
   3. Types that require a structured representation and have internal
      structure that can be represented in several different ways
   Types of the first kind often work without the definition of
   additional methods since the default behavior for to/from string
   conversion uses =read= and =print= which is often sufficient.

   For the second kind of type, at least the following two methods
   have to be defined:
#+BEGIN_SRC lisp
  (defmethod ->xml ((value MY-TYPE)
                    (dest  stp:element)
                    (type  t))
    "Store VALUE in XML element DEST."
    ;; actual conversion code
    )

  (defmethod xml-> ((value stp:element)
                    (type  'MY-TYPE))
    "Retrieve an instance of MY-TYPE from the XML element VALUE."
    ;; actual conversion code
    )
#+END_SRC


* settings							   :noexport:

#+OPTIONS: H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t

;; Local Variables:
;; mode: org
;; End:
